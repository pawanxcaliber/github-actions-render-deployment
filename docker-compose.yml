version: '3.8' # Specify the Docker Compose file format version

services:

  stock-api:
    build: ./api # Build the image using the Dockerfile in the ./api directory
    ports:
      - "8000:8000" # Map host port 8000 to container port 8000
    # Add the service to the shared network
    networks:
      - app-network
    # # volumes: # <-- Ensure this line is commented out if you don't want code changes reflected without rebuild
    #   # Optional: Mount the API code for easier local development (changes reflect without rebuilding)
    #   # - ./api:/app
    # environment: # Define environment variables if needed
    #   # FLASK_ENV: development
    #   # Any API keys or configuration could go here

  stock-ui:
    build: ./ui # Build the image using the Dockerfile in the ./ui directory
    ports:
      - "3002:80" # Map host port 3002 to container port 80 (Nginx default). Note: Changed from 3000 in notes based on your input.
    # Ensure the 'volumes:' line below is commented out if the list items are commented out.
    # volumes: # <--- THIS LINE IS NOW EXPLICITLY COMMENTED OUT
      # Mount the UI code for hot-reloading during development (if configured in UI)
      # Note: This can sometimes be tricky with Node.js dependencies
      # - ./ui:/app # <-- Uncomment if you need live code changes reflecting
      # Create a named volume specifically for node_modules (often needed when mounting code)
      # This prevents the host's node_modules from overwriting the container's
      # - ui_node_modules:/app/node_modules # <-- Uncomment if mounting code above
    depends_on:
      - stock-api # Ensure the API container starts before the UI (optional but good practice)
    # Add the service to the shared network
    networks:
      - app-network
    # environment: # Define environment variables if needed
      # API_URL: http://stock-api:8000 # Example: Point UI to the API service name in Docker network


  prometheus: # <--- ADDED: Prometheus Service for metrics collection
    image: prom/prometheus:latest # Use the official Prometheus image
    container_name: prometheus # Optional: Give it a fixed container name
    volumes:
      # Mount a local Prometheus configuration file
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090" # Expose Prometheus UI on host port 9090
    command: # Command to start Prometheus with our config
      - --config.file=/etc/prometheus/prometheus.yml
    networks:
      - app-network # Connect to the shared network

  grafana: # <--- ADDED: Grafana Service for visualization
    image: grafana/grafana:latest # Use the official Grafana image
    container_name: grafana # Optional: Give it a fixed container name
    ports:
      - "3000:3000" # Expose Grafana UI on host port 3000. Note: This was the default suggested for UI earlier, check for conflict. If 3002 is your UI, 3000 for Grafana should be fine.
    volumes:
      # Volume for persistent Grafana data (dashboards, config)
      - grafana_data:/var/lib/grafana
    environment: # Environment variables for initial Grafana setup
      - GF_SECURITY_ADMIN_USER=admin # Default admin user
      - GF_SECURITY_ADMIN_PASSWORD=admin # Default admin password (SECURE THIS IN PRODUCTION!)
    networks:
      - app-network # Connect to the shared network
    depends_on: # Grafana needs Prometheus to run to get data
      - prometheus

# Define the shared network so services can communicate using their service names
networks:
  app-network:
    driver: bridge

# Define the named volumes for data persistence (Grafana)
volumes:
  ui_node_modules: # Volume for UI node_modules (only needed if mounting UI code)
  grafana_data: # Volume for Grafana persistent data
